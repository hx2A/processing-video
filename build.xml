<?xml version="1.0"?>
<project name="Processing Video Library" default="build">

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <property environment="env"/>

  <property file="local.properties" />

  <condition property="props.present">
    <available file="local.properties" />
  </condition>

  <fail unless="processing.dir"
        message="To make the build work, create a file named local.properties, with a line that reads:
${line.separator}processing.dir=/path/to/processing-git
${line.separator}with the path to where you have the code for Processing 3 checked out. ${line.separator}(This script will look for the 'core' directory inside that folder.)" />

  <subant buildpath="${processing.dir}/core" />

  <property name="core.dir" value="${processing.dir}/core/library" />

  <condition property="processing.built">
    <available file="${core.dir}/core.jar" />
  </condition>

  <fail unless="processing.built"
        message="Please first build Processing so that we have a usable core.jar to bundle with the app." />

  <property name="core.classpath.location" value="${processing.dir}/core/library/" />
  <property name="compiler.classpath.location" value="${processing.dir}/java/mode/" />

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="clean" description="Clean the build directories">
    <delete dir="bin" />
    <delete file="library/video.jar" />
  </target>

  <target name="compile" description="Compile sources">
    <condition property="core-built">
      <available file="${core.classpath.location}/core.jar" />
    </condition>
    <fail unless="core-built" message="Please build the core library first and make sure it sits in ${core.classpath.location}/core.jar" />

    <mkdir dir="bin" />
    <javac source="1.8"
           target="1.8"
           srcdir="src" destdir="bin"
           encoding="UTF-8"
           includeAntRuntime="false"
           classpath="${core.classpath.location}/core.jar;
                      library/gst1-java-core-1.4.0.jar;
                      library/jna.jar"
           nowarn="true">
      <compilerclasspath path="${compiler.classpath.location}/org.eclipse.jdt.core.jar;
                               ${compiler.classpath.location}/jdtCompilerAdapter.jar" />
    </javac>
  </target>

  <target name="build" depends="compile" description="Build video library">
    <jar basedir="bin" destfile="library/video.jar" />
    <delete dir="bin" />
  </target>

  <target name="macosx-dist-sign" if="env.VIDEO_APPLE_ID">
    <echo>
      Code signing will only work if you have a $99/yr Apple developer ID.

      With a proper ID, if code signing fails, you may need to use:
      export CODESIGN_ALLOCATE="/Applications/Xcode.app/Contents/Developer/usr/bin/codesign_allocate"
    </echo>

    <!-- Need to create a Developer ID Application certificate />-->
    <!-- https://developer.apple.com/account/resources/certificates/list -->

    <apply executable="/usr/bin/codesign" dir="library" failonerror="true">
      <arg value="--sign" />
      <arg value="Developer ID Application" />

      <!-- remove all other signatures -->
      <arg value="--force" />

      <arg value="--entitlements" />
      <arg value="../ffs.entitlements" />

      <!-- recursively sign everything -->
      <arg value="--deep" />

      <!-- enable the "hardened runtime" -->
      <arg value="--options" />
      <arg value="runtime" />

      <fileset dir="library/macosx">
        <patternset>
          <include name="**/*.dylib" />
        </patternset>
      </fileset>
    </apply>

    <!-- Verify that the signature will pass Gatekeeper checks
         https://developer.apple.com/library/mac/technotes/tn2206 -->
    <!--
    <exec executable="/usr/bin/codesign" dir="macosx/work">
      <arg value="- -verify" />
      <arg value="- -deep" />
      <arg value="- -verbose=2" />
      <arg value="Processing.app" />
    </exec>
    -->
    <!-- Disabling since it's a lot of gunk but not that useful. -->

    <echo>
      Signed Gstreamer libraries
    </echo>    
  </target>

  <target name="macosx-dist-notarize" if="env.VIDEO_APPLE_ID">
    <!-- xcrun: error: unable to find utility "altool", not a developer tool or in PATH -->
    <!-- fix with 'sudo xcode-select -r' -->

    <!-- when it's time to sign/update documents or make an app password: -->
    <!-- https://appleid.apple.com/account/manage -->

    <exec executable="/usr/bin/xcrun" dir="dist" failonerror="true">
      <arg value="altool" />
      <arg value="--notarize-app" />

      <!-- spew a bunch of useless garbage that has nothing to do with success/failure -->
      <!-- <arg value="- -verbose" /> -->

      <arg value="--primary-bundle-id" />
      <arg value="processing.video" />

      <arg value="--username" />
      <arg value="${env.VIDEO_APPLE_ID}" />

      <arg value="--password" />
      <arg value="${env.VIDEO_LIB_PASSWORD}" />

      <arg value="--asc-provider" />
      <arg value="${env.PROVIDER_SHORT_NAME}" />

      <arg value="--file" />
      <arg value="video.zip" />

    </exec>

    <echo>
      Check on notarization status with:

      xcrun altool -u $VIDEO_APPLE_ID -p $VIDEO_LIB_PASSWORD --notarization-info [the RequestUUID above]
    </echo>
  </target>

  <target name="dist" depends="build" description="Creates distribution package">
    <mkdir dir="dist/tmp/video" />

    <antcall target="macosx-dist-sign" />

    <!-- copy library files (jar and gstreamer natives) -->
    <copy todir="dist/tmp/video/library">
      <fileset dir="library" />
    </copy>

    <!-- copy examples -->
    <copy todir="dist/tmp/video/examples">
      <fileset dir="examples" />
    </copy>

    <!-- copy source -->
    <copy todir="dist/tmp/video/src">
      <fileset dir="src" />
    </copy>

    <!-- copy properties -->
    <copy file="library.properties" tofile="dist/tmp/video/library.properties" />

    <!-- create the java reference of the library -->
    <mkdir dir="dist/tmp/video/reference" />
    <javadoc bottom="Processing video library by The Processing Foundation. (c) 2011-21"
             classpath="${core.classpath.location}/core.jar;
                        library/gst1-java-core-1.4.0.jar;
                        library/jna.jar;
                        bin"
             destdir="dist/tmp/video/reference"
             verbose="false"
             stylesheetfile="resources/stylesheet.css"
             public="true" version="false"
             doctitle="Javadocs: Video"
             windowtitle="Javadocs: Video">

      <!-- TODO these are reeeaally out of date [fry 200929] -->
      <link href="http://java.sun.com/javase/6/docs/api/" />
      <link href="http://processing.googlecode.com/svn/trunk/processing/build/javadoc/core/" />

      <taglet name="ExampleTaglet" path="resources/code" />
      <fileset dir="dist/tmp/video/src" defaultexcludes="yes">
        <!-- add packages to be added to reference. -->
        <include name="**/*"/>
      </fileset>
    </javadoc>

    <!-- create zip package -->
    <delete file="dist/video.zip"/>
    <zip destfile="dist/video.zip" basedir="dist/tmp" excludes="**/.DS_Store" />

    <!-- copy properties to use by download manager -->
    <copy file="library.properties" tofile="dist/video.txt" />

    <delete dir="dist/tmp" />

    <antcall target="macosx-dist-notarize" />

    <echo>
      =======================================================
      Processing Video Library was built. Grab it from

      dist/video.zip
      =======================================================
    </echo>    
  </target>

</project>
